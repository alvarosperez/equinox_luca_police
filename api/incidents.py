import json
import random
import logging
import sqlite3 as lite
import googlemaps
from datetime import datetime
from shapely.geometry import box, Point
import ConfigParser
import time


radius = 0.02

class Planner:
    query = 'select code, lat, lon, day, state from cars'

    def __init__(self):
        try:
            Config = ConfigParser.ConfigParser()
            Config.read('api.cfg')

            dbpath = Config.get('database', 'path')
            logging.info("Connecting to database: " + dbpath)

            self.cars_mock = [[[23,"b4C",19.301836,-99.1190033,"2016-12-18 15:56:59.063",0,1241,"21 mins",8924,"8.9 km",0.13793],[56,"b33",19.4003448,-99.1328278,"2016-12-18 22:02:31.063",0,1292,"22 mins",11003,"11.0 km",0.13646],[40,"bA",19.360281,-99.1727905,"2016-12-18 21:46:03.063",0,1346,"22 mins",13344,"13.3 km",0.14304],[28,"b43",19.3602047,-99.1724777,"2016-12-18 19:34:52.127",0,1390,"23 mins",13373,"13.4 km",0.14298],[2,"b5A",19.4243069,-99.0896912,"2016-12-24 21:01:18.063",0,1496,"25 mins",11756,"11.8 km",0.14303],[41,"b10",19.4243584,-99.0896606,"2016-12-18 21:48:15.063",0,1496,"25 mins",11757,"11.8 km",0.14304],[18,"b2C",19.4203396,-99.0755844,"2016-12-18 03:44:13.063",0,1623,"27 mins",9579,"9.6 km",0.14304],[33,"b5C",19.4202881,-99.0753555,"2016-12-18 21:41:44.063",0,1628,"27 mins",9600,"9.6 km",0.14304],[21,"b39",19.4202366,-99.0752792,"2016-12-18 06:52:42.063",0,1630,"27 mins",9610,"9.6 km",0.14303],[52,"b28",19.4479618,-99.0790176,"2016-12-18 21:57:51.063",0,1637,"27 mins",16686,"16.7 km",0.14145],[44,"b27",19.3176327,-99.1402512,"2016-12-18 21:50:50.063",0,1701,"28 mins",13178,"13.2 km",0.13803],[1,"b53",19.4403324,-99.0767593,"2016-12-24 20:57:12.063",0,1716,"29 mins",13007,"13.0 km",0.14304],[42,"b49",19.4403324,-99.0767365,"2016-12-18 21:48:44.063",0,1717,"29 mins",13010,"13.0 km",0.14304],[5,"b11",19.4403324,-99.0764008,"2016-12-24 21:06:52.063",0,1724,"29 mins",13041,"13.0 km",0.14304],[34,"b5D",19.4402809,-99.0764008,"2016-12-18 21:41:50.063",0,1725,"29 mins",13044,"13.0 km",0.14304],[31,"b41",19.4399738,-99.0762253,"2016-12-18 21:37:22.063",0,1727,"29 mins",12443,"12.4 km",0.14304],[37,"b2A",19.4401531,-99.0763245,"2016-12-18 21:43:33.127",0,1728,"29 mins",13057,"13.1 km",0.14304],[32,"b40",19.4402046,-99.0758667,"2016-12-18 21:39:22.127",0,1749,"29 mins",12496,"12.5 km",0.14304],[51,"b1D",19.4403076,-99.0758133,"2016-12-18 21:57:19.063",0,1754,"29 mins",12509,"12.5 km",0.14304],[45,"b31",19.3538055,-99.193367,"2016-12-18 21:50:56.127",0,1759,"29 mins",15014,"15.0 km",0.13888],[30,"b32",19.302681,-99.1749649,"2016-12-18 21:16:54.063",0,1863,"31 mins",17441,"17.4 km",0.13711],[54,"b3F",19.3806076,-99.1766815,"2016-12-18 22:00:35.063",0,1863,"31 mins",12217,"12.2 km",0.13904],[20,"b2E",19.3140736,-99.2215042,"2016-12-18 05:42:51.063",0,2158,"36 mins",22939,"22.9 km",0.143],[36,"b2F",19.3138695,-99.2215576,"2016-12-18 21:42:40.063",0,2166,"36 mins",22964,"23.0 km",0.143],[39,"b20",19.504076,-99.0308075,"2016-12-18 21:45:48.063",0,2213,"37 mins",24959,"25.0 km",0.13646],[58,"b7",19.4265347,-99.1725311,"2016-12-18 22:04:42",0,2277,"38 mins",16539,"16.5 km",0.14193],[49,"b1E",19.427763,-99.1777267,"2016-12-18 21:54:30.063",0,2337,"39 mins",20067,"20.1 km",0.14258],[26,"b12",19.5004425,-99.2374268,"2016-12-18 18:48:32.063",0,2540,"42 mins",29513,"29.5 km",0.1365],[46,"b4A",19.2808704,-99.1998749,"2016-12-18 21:51:29.127",0,2557,"43 mins",20361,"20.4 km",0.13702],[4,"bE",19.4432507,-99.2022781,"2016-12-24 21:06:46.127",0,2590,"43 mins",22698,"22.7 km",0.13755],[29,"b48",19.5283451,-99.0771179,"2016-12-18 20:30:03.127",0,2682,"45 mins",28956,"29.0 km",0.13646],[38,"b4D",19.4602757,-99.2563934,"2016-12-18 21:44:21.063",0,2741,"46 mins",29007,"29.0 km",0.13646],[53,"b21",19.3676281,-99.2616196,"2016-12-18 21:59:36.127",0,2755,"46 mins",27198,"27.2 km",0.13966],[48,"b42",19.3571587,-99.2745209,"2016-12-18 21:54:04.127",0,2768,"46 mins",29716,"29.7 km",0.14301],[25,"b26",19.3562107,-99.2753143,"2016-12-18 18:02:32.063",0,2803,"47 mins",29852,"29.9 km",0.14279],[6,"b46",19.5168762,-99.2726517,"2016-12-24 21:11:00.063",0,2916,"49 mins",33672,"33.7 km",0.1365],[27,"b3D",19.5563011,-99.0483475,"2016-12-18 19:25:08.063",0,2958,"49 mins",30721,"30.7 km",0.13646],[3,"b8",19.5633659,-99.2294693,"2016-12-24 21:04:39.063",0,3482,"58 mins",39340,"39.3 km",0.13646],[47,"bC",19.2019196,-99.111145,"2016-12-18 21:52:50.063",0,3693,"1 hour 2 mins",23180,"23.2 km",0.13646],[43,"b1",19.1422462,-98.7692566,"2016-12-18 21:50:09.063",0,4093,"1 hour 8 mins",51429,"51.4 km",0.14304],[55,"b16",19.6541691,-99.0979614,"2016-12-18 22:02:26.063",0,4332,"1 hour 12 mins",46301,"46.3 km",0.14304],[57,"b47",19.6912136,-98.8502274,"2016-12-18 22:04:15.063",0,4353,"1 hour 13 mins",61781,"61.8 km",0.14304],[24,"b2D",18.9850121,-99.2119064,"2016-12-18 17:02:17.127",0,4434,"1 hour 14 mins",81918,"81.9 km",0.14304],[22,"b68",18.9852676,-99.2116241,"2016-12-18 12:07:35",0,4436,"1 hour 14 mins",81959,"82.0 km",0.14304],[13,"b4B",18.9882107,-99.207962,"2016-12-17 13:09:41",0,4455,"1 hour 14 mins",82465,"82.5 km",0.14304],[16,"b4",18.9889793,-99.2069626,"2016-12-18 01:11:37",0,4460,"1 hour 14 mins",82601,"82.6 km",0.14304],[35,"bD",18.9892864,-99.2066803,"2016-12-18 21:42:15",0,4461,"1 hour 14 mins",82644,"82.6 km",0.14304],[50,"b1A",19.6869125,-98.8679199,"2016-12-18 21:56:27.063",0,4477,"1 hour 15 mins",61391,"61.4 km",0.14304],[15,"b34",19.2870903,-99.5795975,"2016-12-18 00:34:42",0,4479,"1 hour 15 mins",69319,"69.3 km",0.14304],[12,"b45",19.2868862,-99.5750427,"2016-12-17 05:05:02",0,4501,"1 hour 15 mins",69797,"69.8 km",0.14304],[59,"b18",18.9793015,-99.1012573,"2016-12-18 22:04:55",0,4567,"1 hour 16 mins",76546,"76.5 km",0.14304],[10,"b15",19.3507328,-98.6588135,"2016-12-16 23:54:24",0,4622,"1 hour 17 mins",84440,"84.4 km",0.14304],[9,"b35",19.4067974,-99.5997467,"2016-12-16 21:31:04",0,4632,"1 hour 17 mins",77491,"77.5 km",0.14304],[0,"b13",19.7437191,-99.1799011,"2016-12-24 20:54:48.063",0,4688,"1 hour 18 mins",60865,"60.9 km",0.14304],[11,"b44",19.3459206,-99.5949326,"2016-12-17 03:40:16",0,4843,"1 hour 21 mins",73609,"73.6 km",0.14304],[17,"b72",19.8527737,-99.2876816,"2016-12-18 02:16:34",0,5344,"1 hour 29 mins",91221,"91.2 km",0.14304],[14,"b4E",19.8526974,-99.2875519,"2016-12-17 20:50:44",0,5345,"1 hour 29 mins",91236,"91.2 km",0.14304],[7,"b1F",19.8522873,-99.2872162,"2016-12-16 08:50:35",0,5347,"1 hour 29 mins",91294,"91.3 km",0.14304],[19,"b14",19.852314,-99.2871933,"2016-12-18 05:19:04",0,5347,"1 hour 29 mins",91293,"91.3 km",0.14304],[8,"b19",19.8521862,-99.2870941,"2016-12-16 17:47:45",0,5348,"1 hour 29 mins",91311,"91.3 km",0.14304]], [[32,"bD",19.4365692,-99.2047348,"2016-12-20 13:25:36.127",0,780,"13 mins",5082,"5.1 km",0.14242],[46,"b47",19.4386692,-99.2036591,"2016-12-20 13:36:54.063",0,824,"14 mins",5274,"5.3 km",0.14262],[38,"b21",19.3887997,-99.2403717,"2016-12-20 13:34:16.063",0,874,"15 mins",7091,"7.1 km",0.13704],[48,"b28",19.4273529,-99.1970596,"2016-12-20 13:37:31.063",0,958,"16 mins",6049,"6.0 km",0.14186],[36,"bE",19.3679867,-99.2613907,"2016-12-20 13:31:19.063",0,1000,"17 mins",8493,"8.5 km",0.1402],[45,"b42",19.357338,-99.2744446,"2016-12-20 13:36:47.063",0,1006,"17 mins",11024,"11.0 km",0.14258],[14,"b26",19.3562107,-99.2753143,"2016-12-19 17:02:32.063",0,1055,"18 mins",11182,"11.2 km",0.14259],[54,"b33",19.3561344,-99.2751389,"2016-12-20 13:40:08.063",0,1055,"18 mins",11181,"11.2 km",0.1426],[55,"b1",19.5004158,-99.2374268,"2016-12-20 13:40:23.063",0,1089,"18 mins",12676,"12.7 km",0.14019],[27,"b8",19.4452477,-99.2030487,"2016-12-20 13:14:56.063",0,1090,"18 mins",6023,"6.0 km",0.1413],[33,"b2E",19.4291191,-99.1783905,"2016-12-20 13:26:51.063",0,1155,"19 mins",8200,"8.2 km",0.13982],[35,"b1A",19.4016762,-99.1775208,"2016-12-20 13:29:04.127",0,1279,"21 mins",10101,"10.1 km",0.14174],[58,"b72",19.3942776,-99.1839981,"2016-12-20 13:42:40.063",0,1344,"22 mins",9936,"9.9 km",0.14181],[59,"b7",19.5105286,-99.2433701,"2016-12-20 13:43:32",0,1380,"23 mins",15058,"15.1 km",0.14111],[3,"b46",19.5168762,-99.2726517,"2016-12-24 21:11:00.063",0,1466,"24 mins",16838,"16.8 km",0.13699],[13,"b31",19.3538055,-99.193367,"2016-12-19 15:50:45.063",0,1488,"25 mins",14263,"14.3 km",0.13974],[52,"b3F",19.3809929,-99.1772385,"2016-12-20 13:38:50.063",0,1593,"27 mins",12098,"12.1 km",0.14193],[47,"b4A",19.3140984,-99.2215042,"2016-12-20 13:37:27.063",0,1823,"30 mins",21278,"21.3 km",0.14257],[20,"b2F",19.3138695,-99.2215576,"2016-12-19 20:44:10.063",0,1832,"31 mins",21306,"21.3 km",0.14257],[17,"b43",19.3602047,-99.1724777,"2016-12-19 18:36:15.063",0,1853,"31 mins",14225,"14.2 km",0.14253],[40,"b4",19.3601284,-99.1730423,"2016-12-20 13:35:19.063",0,1924,"32 mins",14524,"14.5 km",0.14262],[26,"b4D",19.5481339,-99.1815643,"2016-12-20 13:14:34.063",0,2103,"35 mins",28215,"28.2 km",0.13604],[49,"b4E",19.3364487,-99.1801605,"2016-12-20 13:37:44.127",0,2177,"36 mins",20737,"20.7 km",0.13945],[53,"b32",19.3027592,-99.1749344,"2016-12-20 13:39:23.063",0,2307,"38 mins",28394,"28.4 km",0.13651],[56,"bC",19.2984581,-99.1364059,"2016-12-20 13:40:53.063",0,2458,"41 mins",30397,"30.4 km",0.13905],[43,"b45",19.2911873,-99.5158539,"2016-12-20 13:36:41.063",0,2655,"44 mins",42118,"42.1 km",0.14262],[7,"b34",19.2870903,-99.5795975,"2016-12-18 00:34:42",0,2731,"46 mins",50649,"50.6 km",0.14262],[51,"b4C",19.3015556,-99.1188507,"2016-12-20 13:38:49.063",0,2756,"46 mins",34586,"34.6 km",0.13901],[19,"b48",19.5283451,-99.0771179,"2016-12-19 19:29:53.127",0,2787,"46 mins",24669,"24.7 km",0.13604],[28,"b5D",19.4403839,-99.0767136,"2016-12-20 13:15:38.063",0,2798,"47 mins",22875,"22.9 km",0.14258],[2,"b11",19.4403324,-99.0764008,"2016-12-24 21:06:52.063",0,2806,"47 mins",22906,"22.9 km",0.14262],[42,"b49",19.4402561,-99.0763245,"2016-12-20 13:36:08.063",0,2809,"47 mins",22918,"22.9 km",0.14262],[50,"b40",19.4402561,-99.0763016,"2016-12-20 13:38:49.063",0,2809,"47 mins",22921,"22.9 km",0.14262],[37,"b53",19.4402313,-99.0762787,"2016-12-20 13:32:45.063",0,2810,"47 mins",22924,"22.9 km",0.14262],[34,"b27",19.4402561,-99.0761719,"2016-12-20 13:27:36.063",0,2812,"47 mins",22934,"22.9 km",0.14262],[29,"b44",19.4402046,-99.0760956,"2016-12-20 13:16:50.127",0,2815,"47 mins",22944,"22.9 km",0.14262],[1,"b5A",19.4243069,-99.0896912,"2016-12-24 21:01:18.063",0,2816,"47 mins",24614,"24.6 km",0.14033],[41,"b10",19.4402809,-99.075943,"2016-12-20 13:35:42.063",0,2820,"47 mins",22966,"23.0 km",0.14259],[44,"b1F",19.439949,-99.0760956,"2016-12-20 13:36:45.063",0,2871,"48 mins",22889,"22.9 km",0.14262],[25,"b2C",19.4203396,-99.0755844,"2016-12-20 01:47:53.063",0,2882,"48 mins",25456,"25.5 km",0.14262],[21,"b5C",19.4203396,-99.0753555,"2016-12-19 22:30:30.063",0,2886,"48 mins",25473,"25.5 km",0.14262],[22,"b12",19.4201851,-99.0753555,"2016-12-19 23:40:51.063",0,2888,"48 mins",25483,"25.5 km",0.14262],[57,"b1D",19.4200573,-99.0751266,"2016-12-20 13:41:29.063",0,2891,"48 mins",25494,"25.5 km",0.14257],[23,"bA",19.35714576748661,-99.09461975097655,"2016-12-20 00:47:58",1,2924,"49 mins",26656,"26.7 km",0.13604],[30,"b16",19.6541691,-99.0979309,"2016-12-20 13:19:11.063",0,3222,"54 mins",38911,"38.9 km",0.14262],[31,"b3D",19.5563011,-99.0483475,"2016-12-20 13:24:37.063",0,3230,"54 mins",29116,"29.1 km",0.13604],[0,"b13",19.7437191,-99.1799011,"2016-12-24 20:54:48.063",0,3255,"54 mins",44014,"44.0 km",0.14262],[24,"b20",19.504076,-99.0308075,"2016-12-20 01:28:24",0,3309,"55 mins",31471,"31.5 km",0.13604],[15,"b2A",19.8525696,-99.2874527,"2016-12-19 17:40:45",0,3939,"1 hour 6 mins",74657,"74.7 km",0.14262],[4,"b19",19.8521862,-99.2870941,"2016-12-16 17:47:45",0,3941,"1 hour 6 mins",74714,"74.7 km",0.14262],[8,"b14",19.852314,-99.2871933,"2016-12-18 05:19:04",0,3941,"1 hour 6 mins",74697,"74.7 km",0.14262],[12,"b35",19.8519802,-99.286911,"2016-12-19 15:21:45.127",0,3942,"1 hour 6 mins",74745,"74.7 km",0.14262],[39,"b39",19.3852921,-98.9751053,"2016-12-20 13:34:23.063",0,4340,"1 hour 12 mins",36331,"36.3 km",0.13604],[18,"b18",19.7308922,-98.7767029,"2016-12-19 19:25:47",0,4882,"1 hour 21 mins",82416,"82.4 km",0.14262],[11,"b41",18.9848576,-99.2121124,"2016-12-19 03:44:39",0,5018,"1 hour 24 mins",96228,"96.2 km",0.14262],[10,"b2D",18.9850121,-99.2119064,"2016-12-18 17:02:17.127",0,5019,"1 hour 24 mins",96255,"96.3 km",0.14262],[9,"b68",18.9852676,-99.2116241,"2016-12-18 12:07:35",0,5021,"1 hour 24 mins",96296,"96.3 km",0.14262],[16,"b1E",18.9855747,-99.2112885,"2016-12-19 17:53:51",0,5022,"1 hour 24 mins",96345,"96.3 km",0.14262],[6,"b4B",18.9882107,-99.207962,"2016-12-17 13:09:41",0,5040,"1 hour 24 mins",96802,"96.8 km",0.14262],[5,"b15",19.3507328,-98.6588135,"2016-12-16 23:54:24",0,6116,"1 hour 42 mins",104272,"104 km",0.14262]]] * 6

            self.mock = Config.getboolean('app', 'mock')
            print self.mock
            #self.con = lite.connect('/data/hertz/luca_police.db')
            self.con = lite.connect(dbpath, check_same_thread=False)

            self.cur = self.con.cursor()
            self.gmaps = googlemaps.Client(key=Config.get('google', 'api_key'))

        except:
            logging.error("Couldnt find database")


    def get_positions_list(self):
        # Returns [[code, lat, long, day, state]]
        result = self.cur.execute(self.query)

        a = []
        for r in result:
            a.append(r)

        return a



    def calculate_distance(self, positions, lat_dest, lon_dest):
        car_latlons = []
        #print type(positions)
        #print positions

        for (code, lat, lon, dt, state) in positions:
            logging.info("Incluying latlong: " + str((lat,lon)))
            car_latlons.append((lat,lon))

        distances = self.gmaps.distance_matrix(car_latlons, (lat_dest,lon_dest),
                                          mode='driving',
                                          departure_time=datetime.now())

        return_distances = []

        for (i, (code, lat, lon, dt, state)) in enumerate(positions):
            return_distances.append( (i, code, lat, lon, dt, state
                   , distances['rows'][i]['elements'][0]['duration']['value']
                   , distances['rows'][i]['elements'][0]['duration']['text']
                   , distances['rows'][i]['elements'][0]['distance']['value']
                   , distances['rows'][i]['elements'][0]['distance']['text'] ) )

        return sorted(return_distances, key=lambda x: x[6])


    def calculate_coverage(self, distances):
        # distances format: code, lat, lon, dt, state, time_value, time_text, dist_value, dist_text
        # Para cada vehiculo calculo la cobertura sobre el bounding box del DF
        bbox = box(-99.3573, 19.5927, -98.9433,  19.1322)

        circles = []
        for c in distances:
            # print c
            circles.append(Point(float(c[3]), float(c[2])).buffer(radius))

        coverages = []
        # Need to improve this
        for i in range(len(circles)):
            circle_union = None
            for j in range(len(circles)):
                if i == j:
                    continue
                if not circle_union:
                    circle_union = circles[j]
                else:
                    circle_union = circle_union.union(circles[j])
            coverages.append(round((bbox.area - bbox.difference(circle_union).area)/bbox.area,5))

        new_distances = []
        for (i, c) in enumerate(distances):
            new_distances.append(c + (coverages[i],))

        return new_distances









    def simulate_incident(self, lat, lon):

        car_positions = self.get_positions_list()
        #print lat
        #print lon

        if not self.mock:
            car_distances = self.calculate_distance(car_positions, float(lat), float(lon))
            car_distances = self.calculate_coverage(car_distances)
        else:
            print ("MOOOCK")
            time.sleep(3)
            car_distances = self.cars_mock.pop()

        return json.dumps(car_distances)

